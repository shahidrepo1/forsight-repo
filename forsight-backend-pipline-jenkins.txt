pipeline {
  agent any

  environment {
    // üê≥ Docker Image Info
    DOCKER_REGISTRY = "192.168.11.60"        // Harbor IP
    DOCKER_PROJECT  = "forsight-harbor"      // Harbor project name
    DOCKER_REPO     = "backend"
    IMAGE_TAG       = "build-${BUILD_NUMBER}" // Versioned build tag
    IMAGE_FULL      = "${DOCKER_REGISTRY}/${DOCKER_PROJECT}/${DOCKER_REPO}:${IMAGE_TAG}"
    IMAGE_LATEST    = "${DOCKER_REGISTRY}/${DOCKER_PROJECT}/${DOCKER_REPO}:latest"

    // üìÅ Environment file path
    ENV_FILE = "Forsight-backend-staging-main/.env"
  }

  options {
    timestamps()
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '10'))
  }

  stages {

    // üßπ Stage 1: Checkout Code
    stage('Checkout Code') {
      steps {
        script {
          echo "üßπ Cleaning workspace..."
          deleteDir()

          echo "‚¨áÔ∏è Cloning latest Forsight backend code..."
          git branch: 'main',
              url: 'https://github.com/shahidrepo1/forsight-repo.git',
              credentialsId: 'github-creds'

          echo "‚úÖ Repository cloned successfully."
        }
      }
    }

    // üèóÔ∏è Stage 2: Build & Push Docker Image
    stage('Build & Push Docker Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'harbor-creds',
                                          usernameVariable: 'HARBOR_USER',
                                          passwordVariable: 'HARBOR_PWD')]) {
          sh '''
            echo "üß± Building Forsight Backend image version: ${IMAGE_TAG} ..."
            docker build -t ${IMAGE_FULL} -f Forsight-backend-staging-main/Dockerfile Forsight-backend-staging-main

            echo "üîê Logging in to Harbor..."
            echo $HARBOR_PWD | docker login http://$DOCKER_REGISTRY -u $HARBOR_USER --password-stdin

            echo "üì§ Pushing versioned image to Harbor..."
            docker push ${IMAGE_FULL}

            echo "üîÑ Tagging image as 'latest'..."
            docker tag ${IMAGE_FULL} ${IMAGE_LATEST}
            docker push ${IMAGE_LATEST}

            echo "‚úÖ Image pushed successfully!"
            echo "‚úÖ Image version: ${IMAGE_TAG}"
          '''
        }
      }
    }

    // ‚öôÔ∏è Stage 3: Run Django Migrations
    stage('Run Django Migrations') {
      steps {
        sh '''
          echo "‚öôÔ∏è Running Django migrations..."
          docker run --rm \
            --network appnet \
            --env-file ${ENV_FILE} \
            -w /app \
            ${IMAGE_LATEST} \
            sh -c "python manage.py migrate --noinput"

          echo "‚úÖ Migrations completed successfully."
        '''
      }
    }

    // üöÄ Stage 4: Deploy Backend + Celery + Celery Beat
    stage('Deploy Containers') {
      steps {
        sh '''
          echo "üöÄ Deploying Forsight Backend, Celery & Beat..."

          docker stop forsight-backend forsight-celery forsight-celery-beat || true
          docker rm forsight-backend forsight-celery forsight-celery-beat || true

          echo "üì• Pulling latest image..."
          docker pull ${IMAGE_LATEST}

          echo "‚ñ∂Ô∏è Starting Backend container..."
          docker run -d --restart always --name forsight-backend \
            --network appnet \
            -p 8000:8000 \
            --env-file ${ENV_FILE} \
            ${IMAGE_LATEST}

          echo "‚ñ∂Ô∏è Starting Celery Worker..."
          docker run -d --restart always --name forsight-celery \
            --network appnet \
            --env-file ${ENV_FILE} \
            ${IMAGE_LATEST} \
            celery -A forsight worker -l info

          echo "‚ñ∂Ô∏è Starting Celery Beat..."
          docker run -d --restart always --name forsight-celery-beat \
            --network appnet \
            --env-file ${ENV_FILE} \
            ${IMAGE_LATEST} \
            celery -A forsight beat -l info

          echo "‚úÖ All backend services deployed successfully!"
        '''
      }
    }

    // ü©∫ Stage 5: Health Check
    stage('Health Check') {
      steps {
        sh '''
          echo "üîç Checking Forsight Backend health..."

          sleep 5  # Give container time to start

          if docker ps | grep -q forsight-backend; then
            echo "‚úÖ Backend container is running successfully!"
          else
            echo "‚ö†Ô∏è Backend container is not running! Please check logs using: docker logs forsight-backend"
            exit 1
          fi
        '''
      }
    }
  }

  post {
    always {
      echo "üîí Logging out from Harbor..."
      sh 'docker logout http://192.168.11.60 || true'
      echo "üèÅ Backend pipeline finished."
    }
    success {
      echo "üéâ Forsight Backend deployment successful!"
    }
    failure {
      echo "‚ùå Forsight Backend deployment failed! Please check logs."
    }
  }
}
