pipeline {
  agent any

  environment {
    // üîß Environment Variables
    DOCKER_REGISTRY = "192.168.11.60"        // Harbor IP
    DOCKER_PROJECT  = "forsight-harbor"      // Harbor project name
    DOCKER_REPO     = "frontend"             // Image repo name
    IMAGE_TAG       = "build-${BUILD_NUMBER}" // Versioned tag
    IMAGE_FULL      = "${DOCKER_REGISTRY}/${DOCKER_PROJECT}/${DOCKER_REPO}:${IMAGE_TAG}"
    IMAGE_LATEST    = "${DOCKER_REGISTRY}/${DOCKER_PROJECT}/${DOCKER_REPO}:latest"
  }

  options {
    timestamps()
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '10'))
  }

  stages {

    // üßπ Stage 1: Checkout Code
    stage('Checkout Code') {
      steps {
        script {
          echo "üßπ Cleaning workspace..."
          deleteDir()

          echo "‚¨áÔ∏è Cloning latest Forsight frontend code..."
          git branch: 'main',
              url: 'https://github.com/shahidrepo1/forsight-repo.git',
              credentialsId: 'github-creds'

          echo "‚úÖ Repository cloned successfully."
        }
      }
    }

    // üèóÔ∏è Stage 2: Build & Push Docker Image
    stage('Build & Push Docker Image') {
      steps {
        dir('forsight-frontend-user-staging-main') {
          withCredentials([usernamePassword(credentialsId: 'harbor-creds',
                                            usernameVariable: 'HARBOR_USER',
                                            passwordVariable: 'HARBOR_PWD')]) {
            sh '''
              echo "üß± Building Forsight Frontend image version: ${IMAGE_TAG} ..."
              docker build -t ${IMAGE_FULL} -f Dockerfile .

              echo "üîê Logging in to Harbor..."
              echo $HARBOR_PWD | docker login http://$DOCKER_REGISTRY -u $HARBOR_USER --password-stdin

              echo "üì§ Pushing versioned image to Harbor..."
              docker push ${IMAGE_FULL}

              echo "üîÑ Tagging image as 'latest'..."
              docker tag ${IMAGE_FULL} ${IMAGE_LATEST}
              docker push ${IMAGE_LATEST}

              echo "‚úÖ Image pushed successfully!"
              echo "‚úÖ Image version: ${IMAGE_TAG}"
            '''
          }
        }
      }
    }

    // üöÄ Stage 3: Deploy Container
    stage('Deploy Container') {
      steps {
        sh '''
          echo "üöÄ Deploying Forsight Frontend..."

          # Stop and remove old container if exists
          docker stop forsight-frontend || true
          docker rm forsight-frontend || true

          echo "üì• Pulling latest image..."
          docker pull ${IMAGE_LATEST}

          echo "‚ñ∂Ô∏è Starting new Frontend container..."
          docker run -d --restart always --name forsight-frontend \
            --network appnet \
            -p 3000:3173 \
            ${IMAGE_LATEST}

          echo "‚úÖ Forsight Frontend deployed successfully!"
        '''
      }
    }

    // ü©∫ Stage 4: Health Check
    stage('Health Check') {
      steps {
        sh '''
          echo "üîç Performing health check on Forsight Frontend..."
          
          sleep 5  # Allow container to initialize
          if docker ps | grep -q forsight-frontend; then
            echo "‚úÖ Container is running successfully."
          else
            echo "‚ö†Ô∏è Container not running! Check logs using: docker logs forsight-frontend"
            exit 1
          fi
        '''
      }
    }
  }

  post {
    always {
      echo "üîí Logging out from Harbor..."
      sh 'docker logout http://192.168.11.60 || true'
      echo "üèÅ Frontend pipeline finished."
    }
    success {
      echo "üéâ Deployment successful!"
    }
    failure {
      echo "‚ùå Deployment failed! Check Jenkins logs or container logs for details."
    }
  }
}
